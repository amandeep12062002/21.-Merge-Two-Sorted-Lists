21. Merge Two Sorted Lists
Solved
Easy
Topics
Companies

You are given the heads of two sorted linked lists list1 and list2.

Merge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists.

Return the head of the merged linked list.

 

Example 1:

Input: list1 = [1,2,4], list2 = [1,3,4]
Output: [1,1,2,3,4,4]

Example 2:

Input: list1 = [], list2 = []
Output: []

Example 3:

Input: list1 = [], list2 = [0]
Output: [0]

 

Constraints:

    The number of nodes in both lists is in the range [0, 50].
    -100 <= Node.val <= 100
    Both list1 and list2 are sorted in non-decreasing order.

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        // Dummy node to serve as the starting point of the merged list
        ListNode* dummy = new ListNode();
        ListNode* tail = dummy;  // Tail pointer for the merged list

        // Traverse both lists until one is exhausted
        while (list1 != nullptr && list2 != nullptr) {
            // Compare the current nodes of both lists
            if (list1->val <= list2->val) {
                tail->next = list1;  // Append list1's current node
                list1 = list1->next; // Move to the next node in list1
            } else {
                tail->next = list2;  // Append list2's current node
                list2 = list2->next; // Move to the next node in list2
            }
            tail = tail->next;  // Move the tail pointer
        }

        // If any nodes are left in list1, append them
        if (list1 != nullptr) {
            tail->next = list1;
        }
        // If any nodes are left in list2, append them
        if (list2 != nullptr) {
            tail->next = list2;
        }

        // The merged list is after the dummy node
        return dummy->next;
    }
};
